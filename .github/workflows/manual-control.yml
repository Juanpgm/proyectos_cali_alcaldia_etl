name: 🔧 ETL Manual Control & Monitoring

on:
  # Ejecución manual con opciones avanzadas
  workflow_dispatch:
    inputs:
      action:
        description: "Acción a ejecutar"
        required: true
        default: "run_pipeline"
        type: choice
        options:
          - run_pipeline
          - test_connections
          - force_full_sync
          - check_data_health
          - cleanup_temp_files
          - generate_report

      collection_name:
        description: "Nombre de la colección Firebase"
        required: false
        default: "unidades_proyecto"
        type: string

      dry_run:
        description: "Modo simulación (no modificar datos)"
        required: false
        default: false
        type: boolean

      debug_mode:
        description: "Activar modo debug (logs detallados)"
        required: false
        default: false
        type: boolean

      notification_level:
        description: "Nivel de notificaciones"
        required: false
        default: "normal"
        type: choice
        options:
          - minimal
          - normal
          - verbose

  # Ejecución para verificar salud del sistema cada 6 horas
  schedule:
    - cron: "0 */6 * * *" # Cada 6 horas

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Job principal de control manual
  manual-control:
    name: 🎮 Manual Control
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 45

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔐 Setup Google Cloud Credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: 🎮 Execute Manual Action
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          GOOGLE_CLOUD_PROJECT: ${{ secrets.FIREBASE_PROJECT_ID }}
          SHEETS_UNIDADES_PROYECTO_URL: ${{ secrets.SHEETS_UNIDADES_PROYECTO_URL }}
          SHEETS_UNIDADES_PROYECTO_WORKSHEET: ${{ secrets.SHEETS_UNIDADES_PROYECTO_WORKSHEET }}
          ACTION: ${{ github.event.inputs.action }}
          COLLECTION_NAME: ${{ github.event.inputs.collection_name }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
          DEBUG_MODE: ${{ github.event.inputs.debug_mode }}
          NOTIFICATION_LEVEL: ${{ github.event.inputs.notification_level }}
        run: |
          echo "🎮 Ejecutando acción manual: $ACTION"
          echo "📅 Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🗂️ Collection: $COLLECTION_NAME"
          echo "🧪 Dry Run: $DRY_RUN"
          echo "🐛 Debug Mode: $DEBUG_MODE"
          echo "🔔 Notification Level: $NOTIFICATION_LEVEL"
          echo "=" * 80

          # Crear script de control manual
          cat > manual_control.py << 'EOF'
          #!/usr/bin/env python3
          """
          Script de control manual para ETL Pipeline
          """
          import os
          import sys
          import json
          from datetime import datetime
          from pathlib import Path

          # Agregar path del proyecto
          sys.path.append('.')

          # Importar módulos del pipeline
          from pipelines.unidades_proyecto_pipeline import run_unidades_proyecto_pipeline
          from database.config import (
              test_connection, test_sheets_connection, get_firestore_client,
              list_collections, get_collection_count, show_system_info
          )

          def test_connections():
              """Prueba todas las conexiones del sistema."""
              print("🔗 Probando conexiones del sistema...")
              
              results = {
                  'firebase': False,
                  'sheets': False,
                  'timestamp': datetime.now().isoformat()
              }
              
              # Test Firebase
              try:
                  results['firebase'] = test_connection()
                  print(f"🔥 Firebase: {'✅ OK' if results['firebase'] else '❌ FAIL'}")
              except Exception as e:
                  print(f"🔥 Firebase: ❌ ERROR - {e}")
              
              # Test Google Sheets
              try:
                  results['sheets'] = test_sheets_connection()
                  print(f"📊 Sheets: {'✅ OK' if results['sheets'] else '❌ FAIL'}")
              except Exception as e:
                  print(f"📊 Sheets: ❌ ERROR - {e}")
              
              return results

          def force_full_sync(collection_name):
              """Fuerza sincronización completa ignorando incremental."""
              print(f"🔄 Forzando sincronización completa para: {collection_name}")
              
              # Configurar variables para forzar recarga completa
              os.environ['SKIP_INCREMENTAL_CHECK'] = 'true'
              os.environ['FORCE_FULL_RELOAD'] = 'true'
              
              return run_unidades_proyecto_pipeline(collection_name)

          def check_data_health(collection_name):
              """Verifica la salud de los datos en Firebase."""
              print(f"🏥 Verificando salud de datos para: {collection_name}")
              
              try:
                  client = get_firestore_client()
                  if not client:
                      return {'status': 'error', 'message': 'No se pudo conectar a Firebase'}
                  
                  # Contar documentos
                  count = get_collection_count(collection_name)
                  
                  # Obtener muestra de documentos para verificar estructura
                  docs = list(client.collection(collection_name).limit(5).stream())
                  
                  health_report = {
                      'status': 'healthy',
                      'document_count': count,
                      'sample_size': len(docs),
                      'timestamp': datetime.now().isoformat(),
                      'collection': collection_name
                  }
                  
                  if count == 0:
                      health_report['status'] = 'warning'
                      health_report['message'] = 'Colección vacía'
                  elif count < 10:
                      health_report['status'] = 'warning'
                      health_report['message'] = 'Pocos documentos encontrados'
                  
                  print(f"📊 Documentos encontrados: {count}")
                  print(f"🎯 Estado: {health_report['status'].upper()}")
                  
                  return health_report
                  
              except Exception as e:
                  return {'status': 'error', 'message': str(e)}

          def cleanup_temp_files():
              """Limpia archivos temporales del pipeline."""
              print("🧹 Limpiando archivos temporales...")
              
              temp_patterns = [
                  'transformation_app/app_outputs/**/temp_*',
                  'transformation_app/app_outputs/**/*_incremental.geojson',
                  'extraction_app/app_inputs/**/temp_*',
                  'logs/temp_*',
                  '**/__pycache__',
                  '**/*.pyc'
              ]
              
              import glob
              deleted_count = 0
              
              for pattern in temp_patterns:
                  files = glob.glob(pattern, recursive=True)
                  for file in files:
                      try:
                          if os.path.isfile(file):
                              os.remove(file)
                              deleted_count += 1
                              print(f"🗑️ Eliminado: {file}")
                          elif os.path.isdir(file) and '__pycache__' in file:
                              import shutil
                              shutil.rmtree(file)
                              deleted_count += 1
                              print(f"🗑️ Eliminado directorio: {file}")
                      except Exception as e:
                          print(f"⚠️ No se pudo eliminar {file}: {e}")
              
              print(f"✅ Limpieza completada: {deleted_count} elementos eliminados")
              return {'deleted_count': deleted_count}

          def generate_report(collection_name):
              """Genera reporte completo del sistema."""
              print("📋 Generando reporte del sistema...")
              
              report = {
                  'timestamp': datetime.now().isoformat(),
                  'system_info': {},
                  'connections': {},
                  'data_health': {},
                  'collections': []
              }
              
              # Información del sistema
              show_system_info()
              
              # Test de conexiones
              report['connections'] = test_connections()
              
              # Salud de datos
              report['data_health'] = check_data_health(collection_name)
              
              # Lista de colecciones
              try:
                  report['collections'] = list_collections()
              except Exception as e:
                  report['collections_error'] = str(e)
              
              # Guardar reporte
              report_file = f'system_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
              with open(report_file, 'w', encoding='utf-8') as f:
                  json.dump(report, f, indent=2, default=str)
              
              print(f"📄 Reporte guardado: {report_file}")
              return report

          def main():
              """Función principal del control manual."""
              action = os.getenv('ACTION', 'run_pipeline')
              collection_name = os.getenv('COLLECTION_NAME', 'unidades_proyecto')
              dry_run = os.getenv('DRY_RUN', 'false').lower() == 'true'
              debug_mode = os.getenv('DEBUG_MODE', 'false').lower() == 'true'
              
              if debug_mode:
                  os.environ['SECURE_LOGGING'] = 'false'
                  print("🐛 Modo debug activado")
              
              if dry_run:
                  print("🧪 MODO SIMULACIÓN - No se modificarán datos")
              
              print(f"🎮 Ejecutando acción: {action}")
              
              try:
                  if action == 'run_pipeline':
                      if dry_run:
                          print("🧪 Simulando ejecución del pipeline...")
                          result = test_connections()
                          success = result['firebase'] and result['sheets']
                      else:
                          success = run_unidades_proyecto_pipeline(collection_name)
                      
                  elif action == 'test_connections':
                      result = test_connections()
                      success = result['firebase'] and result['sheets']
                      
                  elif action == 'force_full_sync':
                      if dry_run:
                          print("🧪 Simulando sincronización completa...")
                          success = True
                      else:
                          success = force_full_sync(collection_name)
                      
                  elif action == 'check_data_health':
                      result = check_data_health(collection_name)
                      success = result['status'] != 'error'
                      
                  elif action == 'cleanup_temp_files':
                      if dry_run:
                          print("🧪 Simulando limpieza...")
                          success = True
                      else:
                          result = cleanup_temp_files()
                          success = True
                      
                  elif action == 'generate_report':
                      result = generate_report(collection_name)
                      success = 'timestamp' in result
                      
                  else:
                      print(f"❌ Acción desconocida: {action}")
                      success = False
                  
                  if success:
                      print(f"✅ Acción '{action}' completada exitosamente")
                  else:
                      print(f"❌ Acción '{action}' falló")
                      sys.exit(1)
                      
              except Exception as e:
                  print(f"💥 Error ejecutando '{action}': {e}")
                  if debug_mode:
                      import traceback
                      traceback.print_exc()
                  sys.exit(1)

          if __name__ == '__main__':
              main()
          EOF

          # Ejecutar script de control manual
          python manual_control.py

      - name: 📤 Upload Manual Control Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: manual-control-${{ github.event.inputs.action }}-${{ github.run_number }}
          path: |
            system_report_*.json
            *.log
          retention-days: 7

  # Job de monitoreo automático de salud
  health-monitoring:
    name: 🏥 Health Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔐 Setup Google Cloud Credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: 🏥 Health Check
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          GOOGLE_CLOUD_PROJECT: ${{ secrets.FIREBASE_PROJECT_ID }}
          SHEETS_UNIDADES_PROYECTO_URL: ${{ secrets.SHEETS_UNIDADES_PROYECTO_URL }}
          SHEETS_UNIDADES_PROYECTO_WORKSHEET: ${{ secrets.SHEETS_UNIDADES_PROYECTO_WORKSHEET }}
        run: |
          echo "🏥 Ejecutando monitoreo de salud automático..."
          echo "📅 Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')"

          python -c "
          import sys
          sys.path.append('.')
          from database.config import test_connection, test_sheets_connection, get_collection_count
          import json
          from datetime import datetime

          # Ejecutar verificaciones de salud
          health_status = {
              'timestamp': datetime.now().isoformat(),
              'firebase_connection': False,
              'sheets_connection': False,
              'collections_status': {},
              'overall_health': 'unknown'
          }

          try:
              # Test Firebase
              health_status['firebase_connection'] = test_connection()
              print(f'🔥 Firebase: {'✅ OK' if health_status['firebase_connection'] else '❌ FAIL'}')
              
              # Test Google Sheets
              health_status['sheets_connection'] = test_sheets_connection()
              print(f'📊 Sheets: {'✅ OK' if health_status['sheets_connection'] else '❌ FAIL'}')
              
              # Verificar colección principal
              if health_status['firebase_connection']:
                  try:
                      count = get_collection_count('unidades_proyecto')
                      health_status['collections_status']['unidades_proyecto'] = {
                          'document_count': count,
                          'status': 'healthy' if count > 0 else 'empty'
                      }
                      print(f'🗂️ unidades_proyecto: {count} documentos')
                  except Exception as e:
                      health_status['collections_status']['unidades_proyecto'] = {
                          'error': str(e),
                          'status': 'error'
                      }
              
              # Determinar salud general
              if health_status['firebase_connection'] and health_status['sheets_connection']:
                  if any(col.get('status') == 'error' for col in health_status['collections_status'].values()):
                      health_status['overall_health'] = 'degraded'
                  else:
                      health_status['overall_health'] = 'healthy'
              else:
                  health_status['overall_health'] = 'unhealthy'
              
              print(f'🎯 Estado general: {health_status['overall_health'].upper()}')
              
              # Guardar reporte de salud
              with open('health_report.json', 'w') as f:
                  json.dump(health_status, f, indent=2, default=str)
              
              # Determinar código de salida
              if health_status['overall_health'] == 'unhealthy':
                  print('❌ Sistema en estado crítico')
                  sys.exit(1)
              elif health_status['overall_health'] == 'degraded':
                  print('⚠️ Sistema con problemas menores')
                  sys.exit(0)  # No fallar, pero reportar
              else:
                  print('✅ Sistema saludable')
                  sys.exit(0)
                  
          except Exception as e:
              print(f'💥 Error en monitoreo de salud: {e}')
              health_status['overall_health'] = 'error'
              health_status['error'] = str(e)
              with open('health_report.json', 'w') as f:
                  json.dump(health_status, f, indent=2, default=str)
              sys.exit(1)
          "

      - name: 📤 Upload Health Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ github.run_number }}
          path: health_report.json
          retention-days: 30

      - name: 🚨 Health Alert
        if: failure()
        run: |
          echo "🚨 ALERTA: Sistema en estado crítico"
          echo "📅 Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🔗 Ver detalles: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Aquí puedes agregar notificaciones críticas:
          # - Slack webhook para alertas críticas
          # - Email de emergencia
          # - PagerDuty integration
          # - SMS notifications
