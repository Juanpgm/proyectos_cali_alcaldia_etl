name: üèóÔ∏è Unidades Proyecto ETL Pipeline

on:
  # Ejecuci√≥n autom√°tica programada
  schedule:
    # Ejecutar a las 8:00 AM UTC (3:00 AM COT) de lunes a viernes
    - cron: "0 13 * * 1-5" # 8:00 AM COT (UTC-5)
    # Ejecutar a las 4:00 PM UTC (11:00 AM COT) de lunes a viernes
    - cron: "0 21 * * 1-5" # 4:00 PM COT (UTC-5)

  # Ejecuci√≥n manual para forzar actualizaci√≥n inmediata
  workflow_dispatch:
    inputs:
      collection_name:
        description: "Nombre de la colecci√≥n Firebase (opcional)"
        required: false
        default: "unidades_proyecto"
        type: string
      force_full_reload:
        description: "Forzar recarga completa (ignorar incremental)"
        required: false
        default: false
        type: boolean
      environment:
        description: "Ambiente de ejecuci√≥n"
        required: false
        default: "production"
        type: choice
        options:
          - production
          - staging
          - development

  # Ejecuci√≥n en push a main/master para validaci√≥n
  push:
    branches: [main, master]
    paths:
      - "pipelines/unidades_proyecto_pipeline.py"
      - "extraction_app/**"
      - "transformation_app/**"
      - "load_app/**"
      - "database/**"
      - ".github/workflows/unidades-proyecto-etl.yml"

  # Ejecuci√≥n en Pull Request para testing
  pull_request:
    branches: [main, master]
    paths:
      - "pipelines/unidades_proyecto_pipeline.py"
      - "extraction_app/**"
      - "transformation_app/**"
      - "load_app/**"
      - "database/**"

# Variables globales del workflow
env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.7.1"

# Permisos necesarios para Workload Identity Federation
permissions:
  contents: read
  id-token: write

jobs:
  # Job 1: Preparaci√≥n y validaci√≥n del ambiente
  setup-environment:
    name: üîß Setup Environment
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup.outputs.python-version }}
      environment: ${{ steps.setup.outputs.environment }}
      collection-name: ${{ steps.setup.outputs.collection-name }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup Environment Variables
        id: setup
        run: |
          # Determinar ambiente basado en el contexto
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            ENVIRONMENT="production"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            ENVIRONMENT="staging"
          else
            ENVIRONMENT="development"
          fi

          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "python-version=${{ env.PYTHON_VERSION }}" >> $GITHUB_OUTPUT
          echo "collection-name=${{ github.event.inputs.collection_name || 'unidades_proyecto' }}" >> $GITHUB_OUTPUT
          echo "üåç Environment: ${ENVIRONMENT}"

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üîç Validate Project Structure
        run: |
          echo "üîç Validando estructura del proyecto..."
          required_files=(
            "pipelines/unidades_proyecto_pipeline.py"
            "extraction_app/data_extraction_unidades_proyecto.py"
            "transformation_app/data_transformation_unidades_proyecto.py"
            "load_app/data_loading_unidades_proyecto.py"
            "database/config.py"
            "requirements.txt"
          )

          for file in "${required_files[@]}"; do
            if [[ -f "$file" ]]; then
              echo "‚úÖ $file - OK"
            else
              echo "‚ùå $file - MISSING"
              exit 1
            fi
          done

      - name: üß™ Python Syntax Check
        run: |
          echo "üß™ Verificando sintaxis Python..."
          python -m py_compile pipelines/unidades_proyecto_pipeline.py
          python -m py_compile extraction_app/data_extraction_unidades_proyecto.py
          python -m py_compile transformation_app/data_transformation_unidades_proyecto.py
          python -m py_compile load_app/data_loading_unidades_proyecto.py
          python -m py_compile database/config.py
          echo "‚úÖ Sintaxis Python v√°lida"

  # Job 2: Configuraci√≥n de credenciales y conexiones
  configure-credentials:
    name: üîê Configure Credentials
    runs-on: ubuntu-latest
    needs: setup-environment
    if: github.event_name != 'pull_request'

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup-environment.outputs.python-version }}
          cache: "pip"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üîê Setup Google Cloud Credentials (Workload Identity)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: üîß Setup Google Sheets Service Account
        run: |
          echo '${{ secrets.SHEETS_SERVICE_ACCOUNT_JSON }}' > sheets-service-account.json

      - name: ‚òÅÔ∏è Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: üîó Test Firebase Connection
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          GOOGLE_CLOUD_PROJECT: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          echo "üîó Probando conexi√≥n a Firebase..."
          python -c "
          import sys
          sys.path.append('.')
          from database.config import test_connection, show_system_info

          print('=' * 60)
          show_system_info()
          print('=' * 60)

          if test_connection():
              print('‚úÖ Conexi√≥n a Firebase exitosa')
          else:
              print('‚ùå Error de conexi√≥n a Firebase')
              sys.exit(1)
          "

      - name: üìä Test Google Sheets Connection
        env:
          SHEETS_UNIDADES_PROYECTO_URL: ${{ secrets.SHEETS_UNIDADES_PROYECTO_URL }}
          SHEETS_UNIDADES_PROYECTO_WORKSHEET: ${{ secrets.SHEETS_UNIDADES_PROYECTO_WORKSHEET }}
        run: |
          echo "üìä Probando conexi√≥n a Google Sheets..."
          python -c "
          import sys
          sys.path.append('.')
          from database.config import test_sheets_connection

          if test_sheets_connection():
              print('‚úÖ Conexi√≥n a Google Sheets exitosa')
          else:
              print('‚ùå Error de conexi√≥n a Google Sheets')
              sys.exit(1)
          "

  # Job 3: Ejecuci√≥n del Pipeline ETL
  run-etl-pipeline:
    name: üöÄ Execute ETL Pipeline
    runs-on: ubuntu-latest
    needs: [setup-environment, configure-credentials]
    if: github.event_name != 'pull_request'
    timeout-minutes: 30

    strategy:
      fail-fast: true
      matrix:
        include:
          - environment: ${{ needs.setup-environment.outputs.environment }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup-environment.outputs.python-version }}
          cache: "pip"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üîê Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: ‚òÅÔ∏è Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: üèóÔ∏è Create Output Directories
        run: |
          mkdir -p transformation_app/app_outputs/unidades_proyecto_outputs
          mkdir -p extraction_app/app_inputs/unidades_proyecto_input
          mkdir -p logs

      - name: üöÄ Execute ETL Pipeline
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          GOOGLE_CLOUD_PROJECT: ${{ secrets.FIREBASE_PROJECT_ID }}
          SHEETS_UNIDADES_PROYECTO_URL: ${{ secrets.SHEETS_UNIDADES_PROYECTO_URL }}
          SHEETS_UNIDADES_PROYECTO_WORKSHEET: ${{ secrets.SHEETS_UNIDADES_PROYECTO_WORKSHEET }}
          FIRESTORE_BATCH_SIZE: "100"
          FIRESTORE_TIMEOUT: "60"
          FORCE_FULL_RELOAD: ${{ github.event.inputs.force_full_reload }}
          COLLECTION_NAME: ${{ needs.setup-environment.outputs.collection-name }}
          ENVIRONMENT: ${{ matrix.environment }}
        run: |
          echo "üöÄ Iniciando Pipeline ETL Unidades de Proyecto"
          echo "üìÖ Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üåç Environment: $ENVIRONMENT"
          echo "üóÇÔ∏è Collection: $COLLECTION_NAME"
          echo "üîÑ Force Full Reload: $FORCE_FULL_RELOAD"
          echo "=" * 80

          # Configurar variables para forzar recarga completa si es necesario
          if [[ "$FORCE_FULL_RELOAD" == "true" ]]; then
            echo "‚ö†Ô∏è MODO: Recarga completa forzada"
            export SKIP_INCREMENTAL_CHECK=true
          fi

          # Ejecutar el pipeline
          cd pipelines
          python unidades_proyecto_pipeline.py

      - name: üìä Generate Execution Report
        if: always()
        run: |
          echo "üìä Generando reporte de ejecuci√≥n..."

          TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
          REPORT_FILE="execution_report_${TIMESTAMP}.md"

          cat > $REPORT_FILE << EOF
          # üèóÔ∏è ETL Pipeline Execution Report

          **Fecha:** $(date '+%Y-%m-%d %H:%M:%S UTC')  
          **Ambiente:** ${{ matrix.environment }}  
          **Colecci√≥n:** ${{ needs.setup-environment.outputs.collection-name }}  
          **Trigger:** ${{ github.event_name }}  
          **Commit:** \`${{ github.sha }}\`  
          **Branch:** \`${{ github.ref_name }}\`  

          ## ‚öôÔ∏è Configuraci√≥n
          - **Python Version:** ${{ needs.setup-environment.outputs.python-version }}
          - **Runner:** ubuntu-latest
          - **Timeout:** 30 minutos
          - **Force Full Reload:** ${{ github.event.inputs.force_full_reload || 'false' }}

          ## üìà M√©tricas de Ejecuci√≥n
          - **Estado:** ${{ job.status }}
          - **Duraci√≥n:** \${{ steps.pipeline.outcome == 'success' && '‚úÖ Completado' || '‚ùå Fall√≥' }}

          ## üîó Enlaces
          - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})

          ---
          *Generado autom√°ticamente por GitHub Actions*
          EOF

          echo "üìÑ Reporte generado: $REPORT_FILE"
          cat $REPORT_FILE

      - name: üì§ Upload Execution Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: etl-execution-${{ matrix.environment }}-${{ github.run_number }}
          path: |
            execution_report_*.md
            transformation_app/app_outputs/unidades_proyecto_outputs/*.geojson
            logs/
          retention-days: 30

  # Job 4: Notificaciones y cleanup
  notify-completion:
    name: üìß Notify & Cleanup
    runs-on: ubuntu-latest
    needs: [setup-environment, run-etl-pipeline]
    if: always() && github.event_name != 'pull_request'

    steps:
      - name: üìß Success Notification
        if: needs.run-etl-pipeline.result == 'success'
        run: |
          echo "‚úÖ Pipeline ETL completado exitosamente"
          echo "üéØ Ambiente: ${{ needs.setup-environment.outputs.environment }}"
          echo "üìä Colecci√≥n: ${{ needs.setup-environment.outputs.collection-name }}"
          echo "‚è∞ Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')"

          # Aqu√≠ puedes agregar notificaciones adicionales como:
          # - Slack webhook
          # - Email notification
          # - Discord webhook
          # - Teams notification

      - name: üí• Failure Notification
        if: needs.run-etl-pipeline.result == 'failure'
        run: |
          echo "‚ùå Pipeline ETL fall√≥"
          echo "üéØ Ambiente: ${{ needs.setup-environment.outputs.environment }}"
          echo "üìä Colecci√≥n: ${{ needs.setup-environment.outputs.collection-name }}"
          echo "‚è∞ Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üîó Ver logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Aqu√≠ puedes agregar notificaciones de error

      - name: üßπ Cleanup
        if: always()
        run: |
          echo "üßπ Limpieza autom√°tica completada"
          echo "üì¶ Artefactos subidos para revisi√≥n"

  # Job 5: Testing y validaci√≥n (solo en PR)
  test-pipeline:
    name: üß™ Test Pipeline
    runs-on: ubuntu-latest
    needs: setup-environment
    if: github.event_name == 'pull_request'

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup-environment.outputs.python-version }}
          cache: "pip"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-mock  # Dependencias de testing

      - name: üß™ Run Pipeline Tests
        run: |
          echo "üß™ Ejecutando tests del pipeline..."

          # Test de importaci√≥n de m√≥dulos
          python -c "
          import sys
          sys.path.append('.')

          # Test imports
          try:
              from pipelines.unidades_proyecto_pipeline import run_unidades_proyecto_pipeline
              from extraction_app.data_extraction_unidades_proyecto import extract_and_save_unidades_proyecto
              from transformation_app.data_transformation_unidades_proyecto import transform_and_save_unidades_proyecto
              from load_app.data_loading_unidades_proyecto import load_unidades_proyecto_to_firebase
              from database.config import get_firestore_client
              print('‚úÖ Todos los m√≥dulos importados correctamente')
          except ImportError as e:
              print(f'‚ùå Error de importaci√≥n: {e}')
              sys.exit(1)
          "

          # Test de estructura de funciones
          python -c "
          import sys
          sys.path.append('.')
          from pipelines.unidades_proyecto_pipeline import *

          # Verificar funciones principales
          functions_to_test = [
              'run_extraction',
              'run_transformation', 
              'verify_and_prepare_incremental_load',
              'run_incremental_load',
              'create_unidades_proyecto_pipeline',
              'run_unidades_proyecto_pipeline'
          ]

          for func_name in functions_to_test:
              if func_name in globals():
                  print(f'‚úÖ {func_name} - OK')
              else:
                  print(f'‚ùå {func_name} - MISSING')
                  sys.exit(1)
          "

      - name: üìä Code Quality Check
        run: |
          echo "üìä Verificando calidad del c√≥digo..."

          # Verificar que no hay print statements de debug
          if grep -r "print.*debug\|print.*DEBUG" pipelines/ extraction_app/ transformation_app/ load_app/ 2>/dev/null; then
            echo "‚ö†Ô∏è Encontrados print statements de debug"
          else
            echo "‚úÖ No hay print statements de debug"
          fi

          # Verificar que hay documentaci√≥n
          if grep -r "\"\"\"" pipelines/unidades_proyecto_pipeline.py >/dev/null; then
            echo "‚úÖ Pipeline documentado"
          else
            echo "‚ùå Pipeline sin documentaci√≥n"
            exit 1
          fi

          echo "‚úÖ Verificaciones de calidad completadas"
