name: 🔄 Unidades Proyecto - Manual Refresh

on:
  # Ejecución manual con opciones específicas
  workflow_dispatch:
    inputs:
      force_full_sync:
        description: "Forzar sincronización completa (ignorar incremental)"
        required: false
        default: false
        type: boolean

      test_mode:
        description: "Modo prueba (solo verificar conexiones)"
        required: false
        default: false
        type: boolean

      debug_mode:
        description: "Activar logs detallados"
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.12"

# Permisos necesarios para Workload Identity Federation
permissions:
  contents: read
  id-token: write

jobs:
  unidades-proyecto-refresh:
    name: 🏗️ Refresh Unidades de Proyecto
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔐 Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: 🔍 Verify Google Cloud Authentication
        run: |
          echo "🔍 Verificando autenticación..."
          gcloud auth list
          gcloud config list
          echo "✅ Autenticación verificada"

      - name: ⚙️ Configure Service Account Permissions
        run: |
          echo "⚙️ Configurando permisos automáticamente..."

          # Variables
          PROJECT_ID="${{ secrets.FIREBASE_PROJECT_ID }}"
          SERVICE_ACCOUNT="${{ secrets.WIF_SERVICE_ACCOUNT }}"

          echo "📋 Project: $PROJECT_ID"
          echo "🔐 Service Account: $SERVICE_ACCOUNT"

          # Función para verificar y aplicar permisos
          apply_permission() {
            local role=$1
            local description=$2
            echo "🔧 Aplicando $description ($role)..."
            
            if gcloud projects add-iam-policy-binding "$PROJECT_ID" \
              --member="serviceAccount:$SERVICE_ACCOUNT" \
              --role="$role" \
              --quiet > /dev/null 2>&1; then
              echo "✅ $description aplicado correctamente"
            else
              echo "⚠️ $description ya existe o error aplicando"
            fi
          }

          # Función para aplicar permisos de service account
          apply_sa_permission() {
            local role=$1
            local member=$2
            local description=$3
            echo "🔧 Aplicando $description ($role)..."
            
            if gcloud iam service-accounts add-iam-policy-binding "$SERVICE_ACCOUNT" \
              --role="$role" \
              --member="$member" \
              --project="$PROJECT_ID" \
              --quiet > /dev/null 2>&1; then
              echo "✅ $description aplicado correctamente"
            else
              echo "⚠️ $description ya existe o error aplicando"
            fi
          }

          # Obtener project number para WIF
          PROJECT_NUMBER=$(gcloud projects describe "$PROJECT_ID" --format="value(projectNumber)")

          # Aplicar permisos del proyecto
          apply_permission "roles/iam.serviceAccountTokenCreator" "Token Creator"
          apply_permission "roles/iam.serviceAccountUser" "Service Account User"
          apply_permission "roles/datastore.owner" "Firestore Admin"
          apply_permission "roles/firebase.admin" "Firebase Admin"

          # Aplicar auto-impersonación
          apply_sa_permission "roles/iam.serviceAccountTokenCreator" "serviceAccount:$SERVICE_ACCOUNT" "Auto-impersonación"

          # Aplicar Workload Identity binding
          WIF_MEMBER="principalSet://iam.googleapis.com/projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/github-pool/attribute.repository/Juanpgm/proyectos_cali_alcaldia_etl"
          apply_sa_permission "roles/iam.workloadIdentityUser" "$WIF_MEMBER" "Workload Identity"

          echo "🎉 Configuración de permisos completada"

      - name: 🔧 Setup Sheets Service Account
        run: |
          echo '${{ secrets.SHEETS_SERVICE_ACCOUNT_JSON }}' > sheets-service-account.json
          chmod 600 sheets-service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/sheets-service-account.json" >> $GITHUB_ENV

      - name: 🚀 Execute Unidades Proyecto Pipeline
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          GOOGLE_CLOUD_PROJECT: ${{ secrets.FIREBASE_PROJECT_ID }}
          SHEETS_UNIDADES_PROYECTO_URL: ${{ secrets.SHEETS_UNIDADES_PROYECTO_URL }}
          SHEETS_UNIDADES_PROYECTO_WORKSHEET: ${{ secrets.SHEETS_UNIDADES_PROYECTO_WORKSHEET }}
          SHEETS_SERVICE_ACCOUNT_FILE: ./sheets-service-account.json
          FORCE_FULL_SYNC: ${{ github.event.inputs.force_full_sync }}
          TEST_MODE: ${{ github.event.inputs.test_mode }}
          DEBUG_MODE: ${{ github.event.inputs.debug_mode }}
        run: |
          echo "🚀 Iniciando refresh de Unidades de Proyecto"
          echo "📅 Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🧪 Test Mode: $TEST_MODE"
          echo "🔄 Force Full Sync: $FORCE_FULL_SYNC"
          echo "🐛 Debug Mode: $DEBUG_MODE"
          echo "================================================================================"

          # Crear script de ejecución
          cat > run_refresh.py << 'EOF'
          #!/usr/bin/env python3
          """
          Script de refresh manual para Unidades de Proyecto
          """
          import os
          import sys
          from datetime import datetime

          # Agregar path del proyecto
          sys.path.append('.')

          def test_connections():
              """Prueba las conexiones necesarias."""
              print("🔗 Probando conexiones...")
              
              try:
                  import os
                  # Configurar logging para GitHub Actions
                  os.environ.setdefault('SECURE_LOGGING', 'false')
                  
                  from database.config import test_connection, test_sheets_connection
                  
                  # Test Firebase con mejor manejo de errores
                  print("🔥 Probando conexión a Firebase...")
                  try:
                      firebase_ok = test_connection()
                      if firebase_ok:
                          print("🔥 Firebase: ✅ OK")
                      else:
                          print("🔥 Firebase: ❌ FAIL")
                  except Exception as firebase_error:
                      print(f"🔥 Firebase: ❌ ERROR - {firebase_error}")
                      firebase_ok = False
                  
                  # Test Google Sheets
                  print("📊 Probando conexión a Google Sheets...")
                  try:
                      sheets_ok = test_sheets_connection()
                      if sheets_ok:
                          print("📊 Sheets: ✅ OK")
                      else:
                          print("📊 Sheets: ❌ FAIL")
                  except Exception as sheets_error:
                      print(f"📊 Sheets: ❌ ERROR - {sheets_error}")
                      sheets_ok = False
                  
                  # Resultado final
                  if firebase_ok and sheets_ok:
                      print("✅ Todas las conexiones OK")
                      return True
                  else:
                      print("❌ Algunas conexiones fallaron")
                      return False
                  
              except Exception as e:
                  print(f"❌ Error general probando conexiones: {e}")
                  import traceback
                  traceback.print_exc()
                  return False

          def run_pipeline():
              """Ejecuta el pipeline de unidades de proyecto."""
              print("🏗️ Ejecutando pipeline de Unidades de Proyecto...")
              
              try:
                  # Configurar variables de entorno si es necesario
                  if os.getenv('FORCE_FULL_SYNC', 'false').lower() == 'true':
                      os.environ['SKIP_INCREMENTAL_CHECK'] = 'true'
                      print("🔄 Forzando sincronización completa")
                  
                  if os.getenv('DEBUG_MODE', 'false').lower() == 'true':
                      os.environ['SECURE_LOGGING'] = 'false'
                      print("🐛 Modo debug activado")
                  
                  # Importar y ejecutar pipeline (nueva versión sin archivos temporales)
                  from pipelines.unidades_proyecto_inmemory_pipeline import run_inmemory_pipeline
                  
                  # Usar el pipeline en memoria que no requiere archivos temporales
                  success = run_inmemory_pipeline()
                  
                  if success:
                      print("✅ Pipeline ejecutado exitosamente")
                  else:
                      print("❌ Pipeline falló")
                      
                  return success
                  
              except Exception as e:
                  print(f"💥 Error ejecutando pipeline: {e}")
                  if os.getenv('DEBUG_MODE', 'false').lower() == 'true':
                      import traceback
                      traceback.print_exc()
                  return False

          def main():
              """Función principal."""
              test_mode = os.getenv('TEST_MODE', 'false').lower() == 'true'
              
              print(f"🎯 Iniciando refresh - Modo: {'TEST' if test_mode else 'PRODUCCIÓN'}")
              print(f"📅 Timestamp: {datetime.now().isoformat()}")
              
              try:
                  if test_mode:
                      print("🧪 MODO PRUEBA - Solo verificando conexiones")
                      success = test_connections()
                      
                      if success:
                          print("✅ Todas las conexiones funcionan correctamente")
                          print("🎉 Test completado exitosamente")
                      else:
                          print("❌ Algunas conexiones fallaron")
                          sys.exit(1)
                  else:
                      # Primero probar conexiones
                      if not test_connections():
                          print("❌ Fallo en conexiones iniciales")
                          sys.exit(1)
                      
                      # Ejecutar pipeline
                      success = run_pipeline()
                      
                      if success:
                          print("🎉 Refresh completado exitosamente")
                      else:
                          print("❌ Refresh falló")
                          sys.exit(1)
                  
              except Exception as e:
                  print(f"💥 Error general: {e}")
                  sys.exit(1)

          if __name__ == '__main__':
              main()
          EOF

          # Ejecutar script
          python run_refresh.py

      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f sheets-service-account.json
          rm -f run_refresh.py

      - name: 📊 Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unidades-proyecto-refresh-logs-${{ github.run_number }}
          path: |
            *.log
          retention-days: 7

      - name: ✅ Success Notification
        if: success()
        run: |
          echo "🎉 Refresh de Unidades de Proyecto completado exitosamente"
          echo "📅 Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🔗 Ver detalles: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: ❌ Failure Notification
        if: failure()
        run: |
          echo "❌ Refresh de Unidades de Proyecto falló"
          echo "📅 Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🔗 Ver detalles: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
